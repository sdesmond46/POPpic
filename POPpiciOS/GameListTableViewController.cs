// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using POPpicLibrary;
using System.Collections.Generic;
using BigTed;
using System.Threading.Tasks;

namespace POPpiciOS
{
	public partial class GameListTableViewController : UITableViewController
	{
		protected GameListTableSource tableSource;

		// The IntPtr and initWithCoder constructors are required for controllers that need 
		// to be able to be created from a xib rather than from managed code

		public GameListTableViewController (IntPtr handle) : base(handle)
		{
			this.tableSource = new GameListTableSource (new List<GameViewModel> ());
			this.NavigationItem.Title = "Games";
		}

		private POPpicLibrary.MyGamesViewModel.ListType listType;
		public POPpicLibrary.MyGamesViewModel.ListType GameListType { 
			get { 
				return this.listType;
			}  
			set { 
				this.tableSource.ListType = this.listType = value; 
			} 
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.TabBarController.TabBar.Hidden = false;

			var addButton = new UIBarButtonItem (UIBarButtonSystemItem.Add);
			addButton.Clicked += (s, ev) =>  Console.WriteLine("Button Clicked!");
			var trophyButton = new UIBarButtonItem (UIBarButtonSystemItem.Action);
			trophyButton.Clicked += (s, ev) => {
			};

			this.NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
				addButton,
				trophyButton
			};

			this.TableView.Source = tableSource;
		}

		public void SetData(IList<GameViewModel> games) {
			this.TableView.Source = this.tableSource = new GameListTableSource (games)
			{
				ListType = GameListType
			};
			this.tableSource.GameSelected += HandleGameSelected;
			this.TableView.ReloadData ();
		}

		void HandleGameSelected (object sender, GameViewModel e)
		{
			var gameplayViewController = AppDelegate.GameplayStoryboard.InstantiateViewController("GameplayViewController") as GameplayViewController;
			var gameplayViewModel = new GameplayViewModel (AppDelegate.Repository, e.Model, this.View.Frame.Height, this.View.Frame.Width);
			BTProgressHUD.Show ("Loading Game Data", -1, ProgressHUD.MaskType.Black);
			gameplayViewModel.InitializeAsync ().ContinueWith (t => {
				InvokeOnMainThread(() => {
					if (!t.IsFaulted && t.Result) {
						gameplayViewController.SetGameplayViewModel (gameplayViewModel);
						this.TabBarController.TabBar.Hidden = true;
						this.NavigationController.PushViewController (gameplayViewController, true);
					} else {
						// TODO error
					}

					BTProgressHUD.Dismiss();
				});
			}, TaskScheduler.FromCurrentSynchronizationContext());


		}
	}
}
