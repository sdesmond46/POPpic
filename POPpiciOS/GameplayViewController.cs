// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.AVFoundation;
using System.Linq;
using MonoTouch.CoreGraphics;
using POPpicLibrary;
using System.Threading;
using MonoTouch.CoreImage;
using System.Threading.Tasks;

namespace POPpiciOS
{
	public partial class GameplayViewController : UIViewController
	{
		public GameplayViewController (IntPtr handle) : base (handle)
		{
		}

		GameplayViewModel viewModel;

		public void SetGameplayViewModel (GameplayViewModel viewModel)
		{
			this.viewModel = viewModel;

		}

		AVCaptureVideoPreviewLayer previewLayer;
		AVCaptureSession captureSession;
		AVCaptureStillImageOutput output;

		bool cameraInitialized = false;
		void InitializeCameraLayer ()
		{
			this.captureSession = new AVCaptureSession () {
				SessionPreset = AVCaptureSession.PresetMedium // TODO investigate that
			};
			var captureDevice = AVCaptureDevice.DevicesWithMediaType (AVMediaType.Video).Where (dev => dev.Position == AVCaptureDevicePosition.Front).FirstOrDefault ();
			if (captureDevice == null) {
				Console.WriteLine ("No captureDevice - this won't work on the simulator, try a physical device");
				return;
			}
			var input = AVCaptureDeviceInput.FromDevice (captureDevice);
			if (input == null) {
				Console.WriteLine ("No input - this won't work on the simulator, try a physical device");
				return;
			}
			this.captureSession.AddInput (input);

			// set up the output
			output = new AVCaptureStillImageOutput ();
			var dict = new NSMutableDictionary ();
			dict [AVVideo.CodecKey] = new NSNumber ((int)AVVideoCodec.JPEG);
			captureSession.AddOutput (output);

			this.previewLayer = AVCaptureVideoPreviewLayer.FromSession (this.captureSession);
			this.previewLayer.LayerVideoGravity = AVLayerVideoGravity.ResizeAspectFill;
			this.previewLayer.Frame = this.View.Frame;
			this.captureSession.StartRunning ();

			this.cameraInitialized = true;
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			this.TabBarController.TabBar.Hidden = false;
		}

		NSTimer timer;
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			UIApplication.SharedApplication.StatusBarHidden = true;

			// this.ControlsOverlay.Frame = this.View.Frame;
			// this.ControlsOverlay.SetNeedsDisplay ();
			InitializeCameraLayer ();

			// Next set up our UI
			this.FinishRoundButton.TouchUpInside += (sender, e) => {
			};

			this.PlayerOneViewContainer.Layer.BorderColor = this.PlayerTwoViewContainer.Layer.BorderColor = new CGColor (0, 0, 0);
			this.PlayerOneViewContainer.Layer.BorderWidth = this.PlayerTwoViewContainer.Layer.BorderWidth = 3;
			this.PlayerOneViewContainer.Layer.CornerRadius = this.PlayerTwoViewContainer.Layer.CornerRadius = 5;




			this.gameplayView = new GameplayView (this.ControlsOverlay.Frame, this.viewModel);

			// gameplayView.SetImages (backgroundImage, balloonImage);
			gameplayView.BalloonPopped += HandleBalloonPopped;

			this.View.InsertSubview (gameplayView, 0);
			this.View.UserInteractionEnabled = true;

			if (this.viewModel != null) {
				// Go through and set up all of the UI!
				this.PlayerOneTimeElapsed.Text = viewModel.PlayerTime1;
				this.PlayerOnePlayerNameLabel.Text = viewModel.PlayerName1;
				IOSUtilities.SetImageFromStream (PopPicImageCache.GetUserProfileImage (
					this.viewModel.model.GameRequesterId,
					this.viewModel.PlayerProfileImage1),
					this.PlayerOneProfilePictureImage,
					this);


				this.PlayerTwoTimeElapsed.Text = viewModel.PlayerTime2;
				this.PlayerTwoPlayerNameLabel.Text = viewModel.PlayerName2;
				IOSUtilities.SetImageFromStream (PopPicImageCache.GetUserProfileImage (
					this.viewModel.model.GameResponderId,
					this.viewModel.PlayerProfileImage2),
					this.PlayerTwoProfilePictureImage,
					this);

				this.viewModel.Tick += (object sender, bool e) => {
					InvokeOnMainThread(() => {
						this.PlayerOneTimeElapsed.Text = viewModel.PlayerTime1;
						this.PlayerTwoTimeElapsed.Text = viewModel.PlayerTime2;
					});
				};

				this.timer = NSTimer.CreateRepeatingScheduledTimer (TimeSpan.FromMilliseconds (40), delegate {
					this.viewModel.TickExternal();
				});
			}
		}

		GameplayView gameplayView;
		int pictureDelayMs = 500;
		void HandleBalloonPopped (object sender, bool e)
		{
			if (this.cameraInitialized) {
				this.gameplayView.Layer.AddSublayer (this.previewLayer);
				Task.Delay (pictureDelayMs).ContinueWith ((w) => {
					output.CaptureStillImageTaskAsync (output.Connections [0]).ContinueWith (r => {
						if (!r.IsFaulted) {
							var imageData = AVCaptureStillImageOutput.JpegStillToNSData (r.Result);
							InvokeOnMainThread (() => {
								UIImage img = new UIImage (imageData);
								var orientation = img.Orientation;
								UIImage flipped = UIImage.FromImage(img.CGImage, 1, UIImageOrientation.LeftMirrored);
								UIImageView imageView = new UIImageView (flipped);
								imageView.ContentMode = UIViewContentMode.ScaleAspectFill;
								imageView.Frame = this.View.Frame;
								this.View.InsertSubview (imageView, 1);
							});
						}
					});
				});
			}
		}
	}
}
