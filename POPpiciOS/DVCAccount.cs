// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using POPpicLibrary;
using MonoTouch.FacebookConnect;
using System.Drawing;
using Facebook;
using Buddy;
using MonoTouch.Dialog;
using System.Collections.Generic;
using Xamarin.Auth;

namespace POPpiciOS
{
	public partial class DVCAccount : DialogViewController
	{
		public event EventHandler<GameRepository> RepositoryLoaded;

		public DVCAccount (IntPtr p) : base (p)
		{
			InitializeView ();
		}

		public bool ReturnAfterLoading { get; set; }

		private void InitializeView ()
		{
			// Create the Facebook LogIn View with the needed Permissions
			// https://developers.facebook.com/ios/login-ui-control/
			var loginView = new FBLoginView () {
				Frame = new RectangleF (0, 0, UIScreen.MainScreen.ApplicationFrame.Width, 43)
			};

			// Hook up to FetchedUserInfo event, so you know when
			// you have the user information available

			bool didFetchUserInfo = false;
			loginView.FetchedUserInfo += (sender, e) => {
				if (didFetchUserInfo)
					return;
				didFetchUserInfo = true;

				Console.WriteLine ("User is logged in ID=" + e.User.GetId () + ", User name is " + e.User.GetName ());
				FacebookClient fb = new FacebookClient (FBSession.ActiveSession.AccessTokenData.AccessToken);
				fb.AppId = PopPicConstants.AppId;
				fb.AppSecret = PopPicConstants.AppSecret;

				BuddyClient buddyClient = new BuddyClient (PopPicConstants.BuddyAppName, PopPicConstants.BuddyAppKey);
				buddyClient.SocialLoginAsync("Facebook", e.User.GetId(), FBSession.ActiveSession.AccessTokenData.AccessToken).ContinueWith(result => {
					var authenticatedUser = result.Result;

					// Need to save the user
					var accountStore = AccountStore.Create ();
					var properties = new Dictionary<string, string>();
					properties[PopPicConstants.BuddyAccessTokenKey] = authenticatedUser.Token;
					properties[PopPicConstants.FacebookIDTokenKey] = e.User.GetId();
					Account buddyAccount = new Account(authenticatedUser.ID.ToString(), properties);
					accountStore.Save(buddyAccount, PopPicConstants.BuddyAccountKey);

					var repository = new GameRepository(authenticatedUser, buddyClient, fb);
					AppDelegate.Repository = repository;
					InvokeOnMainThread(() => {
						if (this.ReturnAfterLoading) {
							this.NavigationController.PopViewControllerAnimated(true);
						}

						if (this.RepositoryLoaded != null) {
							this.RepositoryLoaded(this, repository);
						}
					});

				});

			};

			// Clean user Picture and label when Logged Out
			loginView.ShowingLoggedOutUser += (sender, e) => {
			};

			loginView.ShowingLoggedInUser += (sender, e) => {
			};

			loginView.HandleError += (sender, e) => {
				Console.WriteLine("Error is ");
			};

			Root = new RootElement ("Log In") {
				new Section ("Please Sign In") {
					new UIViewElement ("", loginView, false) {
						Flags = UIViewElement.CellFlags.DisableSelection | UIViewElement.CellFlags.Transparent,
					}
				}
			};
		}
	}
}
