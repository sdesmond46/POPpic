// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using POPpicLibrary;
using System.Collections.Generic;

namespace POPpiciOS
{
	public partial class MyGamesTabBarController : UITabBarController
	{
		public MyGamesTabBarController (IntPtr handle) : base (handle)
		{
			this.myAccountController = AppDelegate.Storyboard.InstantiateViewController ("DVCMyAccount") as DVCAccount;
			this.myAccountController.RepositoryLoaded += HandleRepositoryLoaded;
			this.navController = this.ViewControllers [0] as UINavigationController;
		}

		DVCAccount myAccountController;
		UINavigationController navController;
		List<GameListTableViewController> gamesControllers = new List<GameListTableViewController>();
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			LoadGameControllers ();

			if (AppDelegate.Repository == null) {
				GoToMyAccountScreen (true);
			}
		}

		void GoToMyAccountScreen(bool returnAfterOpening) {
			myAccountController.ReturnAfterLoading = returnAfterOpening;
			this.navController.PushViewController (myAccountController, true);
			TabBar.Hidden = true;
		}

		void HandleRepositoryLoaded (object sender, POPpicLibrary.GameRepository e)
		{
			TabBar.Hidden = false;
			InitializeMyGames ();
		}

		private void LoadGameControllers() {
			this.gamesControllers.Clear ();
			foreach (var controller in this.ViewControllers) {
				var gameController = controller.ChildViewControllers [0] as GameListTableViewController;
				this.gamesControllers.Add(gameController);
			}

			this.gamesControllers [0].GameListType = MyGamesViewModel.ListType.MY_TURN;
			this.gamesControllers [1].GameListType = MyGamesViewModel.ListType.THEIR_TURN;
			this.gamesControllers [2].GameListType = MyGamesViewModel.ListType.COMPLETED;
		}

		MyGamesViewModel viewModel;
		public void InitializeMyGames() 
		{
			var repository = AppDelegate.Repository;
			if (repository != null) {
				this.viewModel = new MyGamesViewModel (AppDelegate.Repository);
				this.viewModel.InitializeAsync ().ContinueWith ((t) => {
					if (!t.IsFaulted && t.Result) {
						BeginInvokeOnMainThread(() => {
							LoadGameControllers();

							gamesControllers[0].SetData(this.viewModel.MyTurnGames);
							gamesControllers[1].SetData(this.viewModel.TheirTurnGames);
							gamesControllers[2].SetData(this.viewModel.CompletedGames);

						});
					}
				});
			}
		}
	}
}
