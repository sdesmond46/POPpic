// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using MonoTouch.CoreGraphics;
using MonoTouch.CoreAnimation;
using MonoTouch.ObjCRuntime;
using POPpicLibrary;

namespace POPpiciOS
{
	public partial class GameplayView : UIView
	{
		public event EventHandler<bool> BalloonPopped;

		GameplayViewModel viewModel;
		public GameplayView(RectangleF frame, GameplayViewModel viewModel) : base(frame) 
		{
			this.UserInteractionEnabled = true;
			this.viewModel = viewModel;
			this.animationDuration = this.viewModel.TimeRemainingAtStart / 1000.0f;
			this.popped = this.viewModel.BalloonIsPopped;

			UIImage backgroundImage, balloonImage;
			if (this.viewModel.BackgroundImageStream == null || this.viewModel.BalloonImageStream == null) {
				backgroundImage = UIImage.FromBundle ("balloonbackground.jpg");
				balloonImage = UIImage.FromBundle ("balloon_orange.png");
			} else {
				var backgroundData = NSData.FromStream(this.viewModel.BackgroundImageStream);
				var balloonData = NSData.FromStream(this.viewModel.BalloonImageStream);
				backgroundImage = UIImage.LoadFromData(backgroundData);
				balloonImage = UIImage.LoadFromData(balloonData);
			}

			SetImages (backgroundImage, balloonImage);
		}

		float animationDuration;
		object inflationLock = new object ();

		public override void TouchesBegan (NSSet touches, UIEvent evt)
		{
			base.TouchesBegan (touches, evt);
			StartInflating ();
		}

		public override void TouchesEnded (NSSet touches, UIEvent evt)
		{
			base.TouchesEnded (touches, evt);
			StopInflating ();
		}

		public override void TouchesCancelled (NSSet touches, UIEvent evt)
		{
			base.TouchesCancelled (touches, evt);
			StopInflating ();
		}

		[Export("inflateAnimationFinished")]
		void inflateAnimationFinished ()
		{
			OnBalloonPopped ();
			Console.WriteLine ("Animation finished");
		}

		bool inflating = false;
		void StartInflating() {
			lock (inflationLock) {
				if (this.inflating || this.popped)
					return;

				this.viewModel.WatchStart ();
				this.inflating = true;
				if (this.animationPaused) {
					resumeLayer (this.Layer);
				} else {
					InvokeOnMainThread (() => {
						var scaleSize = (float) (this.viewModel.TargetBalloonSizePercentage / this.viewModel.BalloonPercentage);

						UIView.BeginAnimations (null);
						UIView.SetAnimationDuration (this.animationDuration);
						UIView.SetAnimationCurve (UIViewAnimationCurve.Linear);
						this.balloonView.Transform = CGAffineTransform.MakeScale (scaleSize, scaleSize);
						this.balloonView.Alpha = this.viewModel.TargetAlpha;
						UIView.SetAnimationDelegate(this);
						UIView.SetAnimationDidStopSelector (
							new Selector ("inflateAnimationFinished"));
						UIView.CommitAnimations ();
					});
				}
			}
		}

		void StopInflating() {
			lock (inflationLock ) {
				if (!this.inflating || this.popped)
					return;

				this.viewModel.WatchStop ();
				this.inflating = false;
				this.pauseLayer (this.Layer);
			}
		}

		bool popped = false;
		void OnBalloonPopped() {
			this.balloonView.Alpha = 0;
			this.popView.Alpha = 1;
			popped = true;
			this.viewModel.WatchStop ();

			if (this.BalloonPopped != null) {
				this.BalloonPopped (this, true);
			}
		}

		bool animationPaused = false;
		void pauseLayer(CALayer layer) {
			animationPaused = true;
			var pausedTime = layer.ConvertTimeFromLayer (CAAnimation.CurrentMediaTime (), null);
			layer.Speed = 0;
			layer.TimeOffset = pausedTime;
		}

		void resumeLayer(CALayer layer) {
			var pausedTime = layer.TimeOffset;
			layer.Speed = 1;
			layer.TimeOffset = 0;
			layer.BeginTime = 0;
			var timeSincePause = layer.ConvertTimeFromLayer (CAAnimation.CurrentMediaTime (), null) - pausedTime;
			layer.BeginTime = timeSincePause;
		}

		private void SetImagePlacement() 
		{
			this.backgroundView.Frame = this.Frame;

			this.viewModel.SetDimensions (this.Frame.Height, this.Frame.Width);
			float balloonFrameWidth = (float) this.viewModel.BalloonPercentage * this.Frame.Width;
			float balloonFrameHeight = balloonFrameWidth * balloon.Size.Height / balloon.Size.Width;
			this.balloonView.Alpha = (float)this.viewModel.CurrentAlpha;

			var frame = new RectangleF (
				this.Frame.GetMidX() - (balloonFrameWidth/2.0f), 
				this.Frame.GetMidY() - (balloonFrameHeight/2.0f), 
				balloonFrameWidth, 
				balloonFrameHeight);
			balloonView.Frame = frame;

			var popSize = Frame.Width * 0.8f;
			var popFrame = new RectangleF (Frame.Width * .1f, Frame.GetMidY () - (popSize * .5f), popSize, popSize);
			this.popView.Frame = popFrame;
		}

		UIImage background, balloon, pop;
		UIImageView balloonView, backgroundView, popView;
		public void SetImages(UIImage background, UIImage balloon) {
			this.background = background;
			this.balloon = balloon;
			this.pop = UIImage.FromBundle ("popImage.png");

			this.backgroundView = new UIImageView (this.background);
			this.AddSubview (this.backgroundView);

			balloonView = new UIImageView (this.balloon);
		 	this.AddSubview (balloonView);

			this.popView = new UIImageView (this.pop);

			this.popView.Alpha = 0;
			this.AddSubview (popView);

			SetImagePlacement ();
		}

	}
}
